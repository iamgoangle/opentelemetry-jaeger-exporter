// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/iamgoangle/opentelemetry-jaeger-exporter/internal/otel (interfaces: Tracer)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	trace "go.opentelemetry.io/otel/api/trace"
	reflect "reflect"
)

// MockTracer is a mock of Tracer interface
type MockTracer struct {
	ctrl     *gomock.Controller
	recorder *MockTracerMockRecorder
}

// MockTracerMockRecorder is the mock recorder for MockTracer
type MockTracerMockRecorder struct {
	mock *MockTracer
}

// NewMockTracer creates a new mock instance
func NewMockTracer(ctrl *gomock.Controller) *MockTracer {
	mock := &MockTracer{ctrl: ctrl}
	mock.recorder = &MockTracerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTracer) EXPECT() *MockTracerMockRecorder {
	return m.recorder
}

// TracerStart mocks base method
func (m *MockTracer) TracerStart(arg0 context.Context, arg1 string) (context.Context, trace.Span) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TracerStart", arg0, arg1)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(trace.Span)
	return ret0, ret1
}

// TracerStart indicates an expected call of TracerStart
func (mr *MockTracerMockRecorder) TracerStart(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TracerStart", reflect.TypeOf((*MockTracer)(nil).TracerStart), arg0, arg1)
}
